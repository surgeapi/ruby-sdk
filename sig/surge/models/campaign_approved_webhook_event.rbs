module Surge
  module Models
    type campaign_approved_webhook_event =
      {
        account_id: String,
        data: Surge::CampaignApprovedWebhookEvent::Data,
        timestamp: Time,
        type: Surge::Models::CampaignApprovedWebhookEvent::type_
      }

    class CampaignApprovedWebhookEvent < Surge::Internal::Type::BaseModel
      attr_accessor account_id: String

      attr_accessor data: Surge::CampaignApprovedWebhookEvent::Data

      attr_accessor timestamp: Time

      attr_accessor type: Surge::Models::CampaignApprovedWebhookEvent::type_

      def initialize: (
        account_id: String,
        data: Surge::CampaignApprovedWebhookEvent::Data,
        timestamp: Time,
        type: Surge::Models::CampaignApprovedWebhookEvent::type_
      ) -> void

      def to_hash: -> {
        account_id: String,
        data: Surge::CampaignApprovedWebhookEvent::Data,
        timestamp: Time,
        type: Surge::Models::CampaignApprovedWebhookEvent::type_
      }

      type data =
        {
          id: String,
          status: Surge::Models::CampaignApprovedWebhookEvent::Data::status
        }

      class Data < Surge::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor status: Surge::Models::CampaignApprovedWebhookEvent::Data::status

        def initialize: (
          id: String,
          status: Surge::Models::CampaignApprovedWebhookEvent::Data::status
        ) -> void

        def to_hash: -> {
          id: String,
          status: Surge::Models::CampaignApprovedWebhookEvent::Data::status
        }

        type status = :active

        module Status
          extend Surge::Internal::Type::Enum

          ACTIVE: :active

          def self?.values: -> ::Array[Surge::Models::CampaignApprovedWebhookEvent::Data::status]
        end
      end

      type type_ = :"campaign.approved"

      module Type
        extend Surge::Internal::Type::Enum

        CAMPAIGN_APPROVED: :"campaign.approved"

        def self?.values: -> ::Array[Surge::Models::CampaignApprovedWebhookEvent::type_]
      end
    end
  end
end
