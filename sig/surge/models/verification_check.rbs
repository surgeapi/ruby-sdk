module Surge
  module Models
    type verification_check =
      {
        result: Surge::Models::VerificationCheck::result,
        verification: Surge::Verification
      }

    class VerificationCheck < Surge::Internal::Type::BaseModel
      attr_reader result: Surge::Models::VerificationCheck::result?

      def result=: (
        Surge::Models::VerificationCheck::result
      ) -> Surge::Models::VerificationCheck::result

      attr_reader verification: Surge::Verification?

      def verification=: (Surge::Verification) -> Surge::Verification

      def initialize: (
        ?result: Surge::Models::VerificationCheck::result,
        ?verification: Surge::Verification
      ) -> void

      def to_hash: -> {
        result: Surge::Models::VerificationCheck::result,
        verification: Surge::Verification
      }

      type result = :ok | :incorrect | :exhausted | :expired | :already_verified

      module Result
        extend Surge::Internal::Type::Enum

        OK: :ok
        INCORRECT: :incorrect
        EXHAUSTED: :exhausted
        EXPIRED: :expired
        ALREADY_VERIFIED: :already_verified

        def self?.values: -> ::Array[Surge::Models::VerificationCheck::result]
      end
    end
  end
end
