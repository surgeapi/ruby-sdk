module Surge
  module Models
    type message =
      {
        id: String,
        attachments: ::Array[Surge::Message::Attachment],
        body: String,
        conversation: Surge::Message::Conversation
      }

    class Message < Surge::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader attachments: ::Array[Surge::Message::Attachment]?

      def attachments=: (
        ::Array[Surge::Message::Attachment]
      ) -> ::Array[Surge::Message::Attachment]

      attr_reader body: String?

      def body=: (String) -> String

      attr_reader conversation: Surge::Message::Conversation?

      def conversation=: (
        Surge::Message::Conversation
      ) -> Surge::Message::Conversation

      def initialize: (
        ?id: String,
        ?attachments: ::Array[Surge::Message::Attachment],
        ?body: String,
        ?conversation: Surge::Message::Conversation
      ) -> void

      def to_hash: -> {
        id: String,
        attachments: ::Array[Surge::Message::Attachment],
        body: String,
        conversation: Surge::Message::Conversation
      }

      type attachment = { id: String, type: String, url: String }

      class Attachment < Surge::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader type: String?

        def type=: (String) -> String

        attr_reader url: String?

        def url=: (String) -> String

        def initialize: (?id: String, ?type: String, ?url: String) -> void

        def to_hash: -> { id: String, type: String, url: String }
      end

      type conversation =
        {
          id: String,
          contact: Surge::Contact,
          phone_number: Surge::Message::Conversation::PhoneNumber
        }

      class Conversation < Surge::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor contact: Surge::Contact

        attr_reader phone_number: Surge::Message::Conversation::PhoneNumber?

        def phone_number=: (
          Surge::Message::Conversation::PhoneNumber
        ) -> Surge::Message::Conversation::PhoneNumber

        def initialize: (
          id: String,
          contact: Surge::Contact,
          ?phone_number: Surge::Message::Conversation::PhoneNumber
        ) -> void

        def to_hash: -> {
          id: String,
          contact: Surge::Contact,
          phone_number: Surge::Message::Conversation::PhoneNumber
        }

        type phone_number =
          {
            id: String,
            number: String,
            type: Surge::Models::Message::Conversation::PhoneNumber::type_
          }

        class PhoneNumber < Surge::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor number: String

          attr_accessor type: Surge::Models::Message::Conversation::PhoneNumber::type_

          def initialize: (
            id: String,
            number: String,
            type: Surge::Models::Message::Conversation::PhoneNumber::type_
          ) -> void

          def to_hash: -> {
            id: String,
            number: String,
            type: Surge::Models::Message::Conversation::PhoneNumber::type_
          }

          type type_ = :local | :toll_free | :short_code | :demo

          module Type
            extend Surge::Internal::Type::Enum

            LOCAL: :local
            TOLL_FREE: :toll_free
            SHORT_CODE: :short_code
            DEMO: :demo

            def self?.values: -> ::Array[Surge::Models::Message::Conversation::PhoneNumber::type_]
          end
        end
      end
    end
  end
end
